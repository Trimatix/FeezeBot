import asyncio
import io
import os
import random
import discord
from discord import app_commands, Embed
from discord.ui import View, Button
from datetime import timedelta

intents = discord.Intents.default()
intents.message_content = True
client = discord.Client(intents=intents)
tree = app_commands.CommandTree(client)

Activities = (discord.Game("Galaxy On Fire 4: Unleashed"), discord.Game("Galaxy On Fire 2"), discord.Game("Galaxy On Fire 3"))
FLEntries = os.listdir(path = "/FreezeBot/FreezeLibrary")

class Aergh:
    def __init__(self, Enabled, delay, mlimit, climit): #delay in hours, mlimit in messages, climit in characters
        self.Enabled = Enabled
        self.delay = delay
        self.mlimit = mlimit
        self.climit = climit
    def enable(self):
        self.Enabled = True
    def disable(self):
        self.Enabled = False
    def changedelay(self, dir):
        if dir == True:
            self.delay+=1
        else:
            if self.delay == 0:
                return
            else:
                self.delay-=1
    def changemlimit(self, dir):
        if dir == True:
            self.mlimit+=1
        else:
            if self.mlimit == 0:
                return
            else:
                self.mlimit-=1

Autopost = Aergh(Enabled=False, delay=1, mlimit=1, climit=1)

async def calc_timediff(channel: discord.TextChannel): #RETURN TIME DIFFERENCE IN SECONDS AS INTEGER
    last_message = await channel.fetch_message(channel.last_message_id)
    timediff = (discord.utils.utcnow() - last_message.created_at) - timedelta(seconds = 180)
    print(f'calc_timediff = {timediff}')
    return timediff.seconds

async def changeavatar():
    fn = random.choice(os.listdir("/FreezeBot/Avatars"))
    fp = open(f"/FreezeBot/Avatars/{fn}", "rb")
    pfp = fp.read()
    await client.user.edit(username="FeezeBot", avatar = pfp)

async def randfreeze(): #RETURNS RANDOM FREEZE AS DISCORD FILE
    fn = random.choice(os.listdir("/FreezeBot/FreezeLibrary"))
    with open(f"/FreezeBot/FreezeLibrary/{fn}", "rb") as image:
        with io.BytesIO(image.read()) as imageBytes:
            imageBytes.seek(0)
            randFreeze = discord.File(imageBytes, filename = "freeze.png")
            return randFreeze

@client.event
async def on_ready():
    Autopost = Aergh(False,1,1,1)
    print(f"Feeze Bot Initialized")
    print(f"{len(FLEntries)} freezes in circulation")
    await client.change_presence(activity = Activities[(random.randint(1, len(Activities))) - 1])

@tree.command(name='freeze',description=f"Request a random freeze from one of my {len(FLEntries)} freezes!")
async def freeze(i: discord.Interaction):
    randFreeze = await randfreeze()
    await i.response.send_message(file = randFreeze)

async def FBMainMenu(m: discord.Message):
    buttonKill = Button(style=discord.ButtonStyle.red,label="Shutdown",row=4); buttonSettings = Button(style=discord.ButtonStyle.green,label="Autopost Settings",row=1); buttonAvatar = Button(style=discord.ButtonStyle.blurple,label="Change Avatar",row=0)
    e = Embed(description=f"**= *FeezeBot* Admin Menu**\nFreezes: {len(FLEntries)}")
    v = View()
    v.add_item(buttonKill); v.add_item(buttonSettings); v.add_item(buttonAvatar)
    await m.edit(content="",embed=e,view=v)
    async def bK(interaction):
        print(f"shutting down")
        await interaction.response.send_message("Shutting down...",ephemeral=True)
        await client.close()
    async def bS(interaction):
        v.clear_items()
        await m.edit(view=v)
        await interaction.response.defer()
        await FBSettingsMenu(m)
    async def bA(interaction):
        await changeavatar()
        await interaction.response.send_message("Done :thumbsup:", ephemeral = True)
    buttonKill.callback = bK
    buttonAvatar.callback = bA
    buttonSettings.callback = bS

async def FBSettingsMenu(m: discord.Message):
    async def calbac(interaction):
        await interaction.response.defer()
        await FBSettingsMenu(m)
    async def bADU(interaction):
        await interaction.response.defer()
        Autopost.changedelay(True)
        await FBSettingsMenu(m)
    async def bADD(interaction):
        await interaction.response.defer()
        Autopost.changedelay(False)
        await FBSettingsMenu(m)
    async def bAMU(interaction):
        await interaction.response.defer()
        Autopost.changemlimit(True)
        await FBSettingsMenu(m)
    async def bAMD(interaction):
        await interaction.response.defer()
        Autopost.changemlimit(False)
        await FBSettingsMenu(m)
    async def bEA(interaction):
        v.remove_item(buttEnableAutopost)
        Autopost.Enabled = True
        await interaction.response.defer()
        await FBSettingsMenu(m)
    async def bDA(interaction):
        v.remove_item(buttDisableAutopost)
        Autopost.Enabled = False
        await interaction.response.defer()
        await FBSettingsMenu(m)
    buttBack = Button(label="Return to Main Menu",row=4,style=discord.ButtonStyle.red)
    v = View()
    v.add_item(buttBack)
    if Autopost.Enabled == False:
        d = "**= *FeezeBot* Autopost Settings Menu**\nAutopost: Disabled"
        buttEnableAutopost = Button(label="Enable Autopost",row=0, style=discord.ButtonStyle.blurple)
        v.add_item(buttEnableAutopost)
        buttEnableAutopost.callback = bEA
    else:
        d = "**= *FeezeBot* Autopost Settings Menu**\nAutopost: Enabled"
        buttDisableAutopost = Button(label="Disable Autopost",row=0, style=discord.ButtonStyle.blurple)
        v.add_item(buttDisableAutopost)
        buttDisableAutopost.callback = bDA
    buttAuDelayUp = Button(label="Increase Delay                    ",row=1, style=discord.ButtonStyle.gray); buttAuDelayDown = Button(label="Decrease Delay                    ",row=1, style=discord.ButtonStyle.gray); buttAuMlimitUp = Button(label="Increase Message Limit   ",row=2, style=discord.ButtonStyle.gray); buttAuMlimitDown = Button(label="Decrease Message Limit   ",row=2, style=discord.ButtonStyle.gray); buttAuClimitUp = Button(label="Increase Character Limit",row=3, style=discord.ButtonStyle.gray); buttAuClimitDown = Button(label="Decrease Character Limit",row=3, style=discord.ButtonStyle.gray); listbutts = [buttAuDelayUp, buttAuDelayDown, buttAuMlimitUp, buttAuMlimitDown]
    for x in listbutts:
        v.add_item(x)
    if Autopost.delay != 1:
        d = d + f"\nDelay: {str(Autopost.delay)} hours"
    else:
        d = d + f"\nDelay: {str(Autopost.delay)} hour"
    d = d + f"\nMessage Limit: {str(Autopost.mlimit)}\nCharacter Limit: Disabled"
    e = Embed(description=d)
    await m.edit(embed=e,view=v)
    async def bB(interaction):
        v.clear_items()
        await m.edit(view=v)
        await interaction.response.defer()
        await FBMainMenu(m)
    buttBack.callback = bB
    buttAuDelayUp.callback = bADU
    buttAuDelayDown.callback = bADD
    buttAuMlimitUp.callback = bAMU
    buttAuMlimitDown.callback = bAMD

@client.event
async def on_message(m: discord.Message):
    #if m.author.id != 697905630391959572:
    #    return
    #if m.author.name != "Trimatix":
    #    return
    if m.content != "admin":
        return
    e = Embed(description="*Initializing Menu...*")
    await m.reply(content="",embed=e)
    async for message in m.channel.history(limit=1):
        if message.author == client.user:
            m = message
    await FBMainMenu(m)

client.run('token')
